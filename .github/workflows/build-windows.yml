name: Build Windows Executable

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    # Allow manual triggering

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify Pillow installation
      run: |
        python -c "import PIL; print('Pillow version:', PIL.__version__)"
        python -c "from PIL import Image; print('PIL Image module available')"

    - name: Verify icon files exist
      run: |
        dir assets\
        Get-ChildItem assets\icon.ico

    - name: Generate multi-size ICO file
      run: |
        python -c "
        from PIL import Image, ImageDraw
        import struct
        import io

        def add_rounded_corners(image, radius=200):
            mask = Image.new('L', image.size, 0)
            draw = ImageDraw.Draw(mask)
            draw.rounded_rectangle([0, 0, image.size[0], image.size[1]], radius=radius, fill=255)
            output = Image.new('RGBA', image.size, (0, 0, 0, 0))
            output.paste(image, mask=mask)
            return output

        # Open and process the PNG
        img = Image.open('assets/icon.png')
        img = img.convert('RGBA')
        rounded_img = add_rounded_corners(img, radius=200)

        # Create multiple sizes
        sizes = [16, 32, 48, 64, 128, 256]
        images = []

        # Create ICO file manually
        ico_data = bytearray()

        # ICO header: 6 bytes
        ico_data.extend(struct.pack('<HHH', 0, 1, len(sizes)))  # reserved, type, count

        # Calculate offsets for image data
        image_data_offset = 6 + (len(sizes) * 16)  # header + directory entries
        image_data = bytearray()

        # Create directory entries and image data
        for i, size in enumerate(sizes):
            resized = rounded_img.resize((size, size), Image.LANCZOS)
            
            # Convert to BMP format for ICO
            bmp_data = io.BytesIO()
            resized.save(bmp_data, format='BMP')
            bmp_bytes = bmp_data.getvalue()
            
            # ICO directory entry: 16 bytes
            width = size if size < 256 else 0
            height = size if size < 256 else 0
            colors = 0  # 0 means no palette
            reserved = 0
            planes = 1
            bpp = 32
            size_bytes = len(bmp_bytes)
            offset = image_data_offset + len(image_data)
            
            ico_data.extend(struct.pack('<BBBBHHII', width, height, colors, reserved, planes, bpp, size_bytes, offset))
            image_data.extend(bmp_bytes)

        # Combine header, directory, and image data
        ico_data.extend(image_data)

        # Write to file
        with open('assets/icon.ico', 'wb') as f:
            f.write(ico_data)

        print(f'Generated multi-size ICO file with {len(sizes)} sizes: {sizes}')
        print(f'Total ICO file size: {len(ico_data)} bytes')
        "

    - name: Verify multi-size ICO file
      run: |
        python -c "
        import struct
        with open('assets/icon.ico', 'rb') as f:
            data = f.read()
        reserved, type_id, count = struct.unpack('<HHH', data[:6])
        print(f'ICO file contains {count} icon sizes')
        for i in range(count):
            offset = 6 + i * 16
            width, height, colors, reserved, planes, bpp, size, offset_img = struct.unpack('<BBBBHHII', data[offset:offset+16])
            print(f'  Size {i+1}: {width}x{height}, {bpp}bpp')
        "

    - name: Build executable
      run: |
        pyinstaller QuoteFlow.spec

    - name: Sign Windows executable (optional)
      if: false # Set to true if you have a code signing certificate
      run: |
        # Add code signing here if you have a certificate
        # signtool sign /f "certificate.pfx" /p "password" /t "http://timestamp.digicert.com" dist/QuoteFlow.exe

    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: QuoteFlow-Windows
        path: dist/QuoteFlow.exe
        retention-days: 30

    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-windows
        path: |
          build/
          *.log
        retention-days: 7
